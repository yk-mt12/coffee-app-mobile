{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"style\",\"lightColor\",\"darkColor\"],_excluded2=[\"style\",\"lightColor\",\"darkColor\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import DefaultText from\"react-native-web/dist/exports/Text\";import DefaultView from\"react-native-web/dist/exports/View\";import Colors from\"../constants/Colors\";import useColorScheme from\"../../hooks/useColorScheme\";import{jsx as _jsx}from\"react/jsx-runtime\";export function useThemeColor(props,colorName){var theme=useColorScheme();var colorFromProps=props[theme];if(colorFromProps){return colorFromProps;}else{return Colors[theme][colorName];}}export function Text(props){var style=props.style,lightColor=props.lightColor,darkColor=props.darkColor,otherProps=_objectWithoutProperties(props,_excluded);var color=useThemeColor({light:lightColor,dark:darkColor},'text');return _jsx(DefaultText,_objectSpread({style:[{color:color},style]},otherProps));}export function View(props){var style=props.style,lightColor=props.lightColor,darkColor=props.darkColor,otherProps=_objectWithoutProperties(props,_excluded2);var backgroundColor=useThemeColor({light:lightColor,dark:darkColor},'background');return _jsx(DefaultView,_objectSpread({style:[{backgroundColor:backgroundColor},style]},otherProps));}","map":{"version":3,"sources":["/Users/yukim/programming/my-app/coffee-app-mobile/src/components/Themed.tsx"],"names":["Colors","useColorScheme","useThemeColor","props","colorName","theme","colorFromProps","Text","style","lightColor","darkColor","otherProps","color","light","dark","View","backgroundColor"],"mappings":"onCAOA,MAAOA,CAAAA,MAAP,2BACA,MAAOC,CAAAA,cAAP,kC,2CAEA,MAAO,SAASC,CAAAA,aAAT,CACLC,KADK,CAELC,SAFK,CAGL,CACA,GAAMC,CAAAA,KAAK,CAAGJ,cAAc,EAA5B,CACA,GAAMK,CAAAA,cAAc,CAAGH,KAAK,CAACE,KAAD,CAA5B,CAEA,GAAIC,cAAJ,CAAoB,CAClB,MAAOA,CAAAA,cAAP,CACD,CAFD,IAEO,CACL,MAAON,CAAAA,MAAM,CAACK,KAAD,CAAN,CAAcD,SAAd,CAAP,CACD,CACF,CAUD,MAAO,SAASG,CAAAA,IAAT,CAAcJ,KAAd,CAAgC,CACrC,GAAQK,CAAAA,KAAR,CAAwDL,KAAxD,CAAQK,KAAR,CAAeC,UAAf,CAAwDN,KAAxD,CAAeM,UAAf,CAA2BC,SAA3B,CAAwDP,KAAxD,CAA2BO,SAA3B,CAAyCC,UAAzC,0BAAwDR,KAAxD,YACA,GAAMS,CAAAA,KAAK,CAAGV,aAAa,CAAC,CAAEW,KAAK,CAAEJ,UAAT,CAAqBK,IAAI,CAAEJ,SAA3B,CAAD,CAAyC,MAAzC,CAA3B,CAEA,MAAO,MAAC,WAAD,gBAAa,KAAK,CAAE,CAAC,CAAEE,KAAK,CAALA,KAAF,CAAD,CAAYJ,KAAZ,CAApB,EAA4CG,UAA5C,EAAP,CACD,CAED,MAAO,SAASI,CAAAA,IAAT,CAAcZ,KAAd,CAAgC,CACrC,GAAQK,CAAAA,KAAR,CAAwDL,KAAxD,CAAQK,KAAR,CAAeC,UAAf,CAAwDN,KAAxD,CAAeM,UAAf,CAA2BC,SAA3B,CAAwDP,KAAxD,CAA2BO,SAA3B,CAAyCC,UAAzC,0BAAwDR,KAAxD,aACA,GAAMa,CAAAA,eAAe,CAAGd,aAAa,CAAC,CAAEW,KAAK,CAAEJ,UAAT,CAAqBK,IAAI,CAAEJ,SAA3B,CAAD,CAAyC,YAAzC,CAArC,CAEA,MAAO,MAAC,WAAD,gBAAa,KAAK,CAAE,CAAC,CAAEM,eAAe,CAAfA,eAAF,CAAD,CAAsBR,KAAtB,CAApB,EAAsDG,UAAtD,EAAP,CACD","sourcesContent":["/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n"]},"metadata":{},"sourceType":"module"}