{"ast":null,"code":"function formatTimeString(time,showMsecs){var msecs=time%1000;if(msecs<10){msecs=\"00\"+msecs;}else if(msecs<100){msecs=\"0\"+msecs;}var seconds=Math.floor(time/1000);var minutes=Math.floor(time/60000);var hours=Math.floor(time/3600000);seconds=seconds-minutes*60;minutes=minutes-hours*60;var formatted;if(showMsecs){formatted=\"\"+(hours<10?0:\"\")+hours+\":\"+(minutes<10?0:\"\")+minutes+\":\"+(seconds<10?0:\"\")+seconds+\":\"+msecs;}else{formatted=\"\"+(hours<10?0:\"\")+hours+\":\"+(minutes<10?0:\"\")+minutes+\":\"+(seconds<10?0:\"\")+seconds;}return formatted;}export{formatTimeString};","map":{"version":3,"sources":["/Users/yukim/programming/my-app/coffee-app-mobile/node_modules/react-native-stopwatch-timer/lib/utils.js"],"names":["formatTimeString","time","showMsecs","msecs","seconds","Math","floor","minutes","hours","formatted"],"mappings":"AAAA,QAASA,CAAAA,gBAAT,CAA0BC,IAA1B,CAAgCC,SAAhC,CAA2C,CACzC,GAAIC,CAAAA,KAAK,CAAGF,IAAI,CAAG,IAAnB,CAEA,GAAIE,KAAK,CAAG,EAAZ,CAAgB,CACdA,KAAK,MAAQA,KAAb,CACD,CAFD,IAEO,IAAIA,KAAK,CAAG,GAAZ,CAAiB,CACtBA,KAAK,KAAOA,KAAZ,CACD,CAED,GAAIC,CAAAA,OAAO,CAAGC,IAAI,CAACC,KAAL,CAAWL,IAAI,CAAG,IAAlB,CAAd,CACA,GAAIM,CAAAA,OAAO,CAAGF,IAAI,CAACC,KAAL,CAAWL,IAAI,CAAG,KAAlB,CAAd,CACA,GAAIO,CAAAA,KAAK,CAAGH,IAAI,CAACC,KAAL,CAAWL,IAAI,CAAG,OAAlB,CAAZ,CACAG,OAAO,CAAGA,OAAO,CAAGG,OAAO,CAAG,EAA9B,CACAA,OAAO,CAAGA,OAAO,CAAGC,KAAK,CAAG,EAA5B,CACA,GAAIC,CAAAA,SAAJ,CACA,GAAIP,SAAJ,CAAe,CACbO,SAAS,KAAMD,KAAK,CAAG,EAAR,CAAa,CAAb,CAAiB,EAAvB,EAA4BA,KAA5B,MACPD,OAAO,CAAG,EAAV,CAAe,CAAf,CAAmB,EADZ,EAENA,OAFM,MAEKH,OAAO,CAAG,EAAV,CAAe,CAAf,CAAmB,EAFxB,EAE6BA,OAF7B,KAEwCD,KAFjD,CAGD,CAJD,IAIO,CACLM,SAAS,KAAMD,KAAK,CAAG,EAAR,CAAa,CAAb,CAAiB,EAAvB,EAA4BA,KAA5B,MACPD,OAAO,CAAG,EAAV,CAAe,CAAf,CAAmB,EADZ,EAENA,OAFM,MAEKH,OAAO,CAAG,EAAV,CAAe,CAAf,CAAmB,EAFxB,EAE6BA,OAFtC,CAGD,CAED,MAAOK,CAAAA,SAAP,CACD,CAED,OAAST,gBAAT","sourcesContent":["function formatTimeString(time, showMsecs) {\n  let msecs = time % 1000;\n\n  if (msecs < 10) {\n    msecs = `00${msecs}`;\n  } else if (msecs < 100) {\n    msecs = `0${msecs}`;\n  }\n\n  let seconds = Math.floor(time / 1000);\n  let minutes = Math.floor(time / 60000);\n  let hours = Math.floor(time / 3600000);\n  seconds = seconds - minutes * 60;\n  minutes = minutes - hours * 60;\n  let formatted;\n  if (showMsecs) {\n    formatted = `${hours < 10 ? 0 : \"\"}${hours}:${\n      minutes < 10 ? 0 : \"\"\n    }${minutes}:${seconds < 10 ? 0 : \"\"}${seconds}:${msecs}`;\n  } else {\n    formatted = `${hours < 10 ? 0 : \"\"}${hours}:${\n      minutes < 10 ? 0 : \"\"\n    }${minutes}:${seconds < 10 ? 0 : \"\"}${seconds}`;\n  }\n\n  return formatted;\n}\n\nexport { formatTimeString };\n"]},"metadata":{},"sourceType":"module"}