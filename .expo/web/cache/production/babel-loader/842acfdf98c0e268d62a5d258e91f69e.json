{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{memo,useState}from'react';import TextInput from\"react-native-web/dist/exports/TextInput\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import useColorScheme from\"react-native-web/dist/exports/useColorScheme\";import{useDispatch,useSelector}from'react-redux';import Colors from\"../../constants/Colors\";import{calculateWater,updateAmount,calculateIceCoffeeWater}from\"../../../redux/coffeeSlice\";import{jsx as _jsx}from\"react/jsx-runtime\";export var AmountInput=memo(function(){var dispatch=useDispatch();var isDarkMode=useColorScheme()==='dark';var _useState=useState(0),_useState2=_slicedToArray(_useState,2),amount=_useState2[0],setAmount=_useState2[1];var nowScreen=useSelector(function(state){return state.screen.nowScreen;});function changeAmountInput(){switch(nowScreen){case'normal':dispatch(calculateWater(amount));case'iceCoffee':dispatch(calculateIceCoffeeWater(amount));default:dispatch(calculateWater(amount));}}return _jsx(TextInput,{style:[styles.input,isDarkMode?styles.dark:styles.light],placeholder:\"input\",maxLength:3,returnKeyType:\"done\",keyboardType:\"numbers-and-punctuation\",textAlign:\"center\",onChangeText:function onChangeText(newText){return setAmount(Number(newText));},onSubmitEditing:function onSubmitEditing(){dispatch(updateAmount(amount));changeAmountInput();}});});var styles=StyleSheet.create({container:{flex:1},input:{padding:8,marginTop:8,marginRight:10,borderRadius:10,width:100,height:40,fontSize:25,textAlign:'center'},dark:{color:Colors['inputView'].wText,backgroundColor:Colors['inputView'].wBackground},light:{color:Colors['inputView'].dText,backgroundColor:Colors['inputView'].wBackground}});","map":{"version":3,"sources":["/Users/yukim/develop/react-native/coffee-app/src/components/Input/AmountInput.tsx"],"names":["memo","useState","useDispatch","useSelector","Colors","calculateWater","updateAmount","calculateIceCoffeeWater","AmountInput","dispatch","isDarkMode","useColorScheme","amount","setAmount","nowScreen","state","screen","changeAmountInput","styles","input","dark","light","newText","Number","StyleSheet","create","container","flex","padding","marginTop","marginRight","borderRadius","width","height","fontSize","textAlign","color","wText","backgroundColor","wBackground","dText"],"mappings":"iEAAA,OAASA,IAAT,CAAeC,QAAf,KAA+B,OAA/B,C,yMAEA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,MAAOC,CAAAA,MAAP,8BAEA,OACEC,cADF,CAEEC,YAFF,CAIEC,uBAJF,kC,2CAOA,MAAO,IAAMC,CAAAA,WAAW,CAAGR,IAAI,CAAC,UAAM,CACpC,GAAMS,CAAAA,QAAQ,CAAGP,WAAW,EAA5B,CACA,GAAMQ,CAAAA,UAAU,CAAGC,cAAc,KAAO,MAAxC,CACA,cAA4BV,QAAQ,CAAS,CAAT,CAApC,wCAAOW,MAAP,eAAeC,SAAf,eACA,GAAMC,CAAAA,SAAS,CAAGX,WAAW,CAAC,SAACY,KAAD,QAAWA,CAAAA,KAAK,CAACC,MAAN,CAAaF,SAAxB,EAAD,CAA7B,CAEA,QAASG,CAAAA,iBAAT,EAA6B,CAC3B,OAAQH,SAAR,EACE,IAAK,QAAL,CACEL,QAAQ,CAACJ,cAAc,CAACO,MAAD,CAAf,CAAR,CACF,IAAK,WAAL,CACEH,QAAQ,CAACF,uBAAuB,CAACK,MAAD,CAAxB,CAAR,CACF,QACEH,QAAQ,CAACJ,cAAc,CAACO,MAAD,CAAf,CAAR,CANJ,CAQD,CAED,MACE,MAAC,SAAD,EACE,KAAK,CAAE,CAACM,MAAM,CAACC,KAAR,CAAeT,UAAU,CAAGQ,MAAM,CAACE,IAAV,CAAiBF,MAAM,CAACG,KAAjD,CADT,CAEE,WAAW,CAAC,OAFd,CAGE,SAAS,CAAE,CAHb,CAIE,aAAa,CAAC,MAJhB,CAKE,YAAY,CAAC,yBALf,CAME,SAAS,CAAC,QANZ,CAOE,YAAY,CAAE,sBAACC,OAAD,QAAaT,CAAAA,SAAS,CAACU,MAAM,CAACD,OAAD,CAAP,CAAtB,EAPhB,CAQE,eAAe,CAAE,0BAAM,CACrBb,QAAQ,CAACH,YAAY,CAACM,MAAD,CAAb,CAAR,CACAK,iBAAiB,GAClB,CAXH,EADF,CAeD,CAhC8B,CAAxB,CAkCP,GAAMC,CAAAA,MAAM,CAAGM,UAAU,CAACC,MAAX,CAAkB,CAC/BC,SAAS,CAAE,CACTC,IAAI,CAAE,CADG,CADoB,CAI/BR,KAAK,CAAE,CACLS,OAAO,CAAE,CADJ,CAELC,SAAS,CAAE,CAFN,CAGLC,WAAW,CAAE,EAHR,CAILC,YAAY,CAAE,EAJT,CAKLC,KAAK,CAAE,GALF,CAMLC,MAAM,CAAE,EANH,CAOLC,QAAQ,CAAE,EAPL,CAQLC,SAAS,CAAE,QARN,CAJwB,CAc/Bf,IAAI,CAAE,CACJgB,KAAK,CAAEhC,MAAM,CAAC,WAAD,CAAN,CAAoBiC,KADvB,CAEJC,eAAe,CAAElC,MAAM,CAAC,WAAD,CAAN,CAAoBmC,WAFjC,CAdyB,CAkB/BlB,KAAK,CAAE,CACLe,KAAK,CAAEhC,MAAM,CAAC,WAAD,CAAN,CAAoBoC,KADtB,CAELF,eAAe,CAAElC,MAAM,CAAC,WAAD,CAAN,CAAoBmC,WAFhC,CAlBwB,CAAlB,CAAf","sourcesContent":["import { memo, useState } from 'react';\nimport { TextInput, StyleSheet, useColorScheme, SafeAreaView, Switch } from 'react-native';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Colors from '../../constants/Colors';\n\nimport {\n  calculateWater,\n  updateAmount,\n  calculateIceCoffeeAmount,\n  calculateIceCoffeeWater,\n} from '../../../redux/coffeeSlice';\n\nexport const AmountInput = memo(() => {\n  const dispatch = useDispatch();\n  const isDarkMode = useColorScheme() === 'dark';\n  const [amount, setAmount] = useState<number>(0);\n  const nowScreen = useSelector((state) => state.screen.nowScreen);\n\n  function changeAmountInput() {\n    switch (nowScreen) {\n      case 'normal':\n        dispatch(calculateWater(amount));\n      case 'iceCoffee':\n        dispatch(calculateIceCoffeeWater(amount));\n      default:\n        dispatch(calculateWater(amount));\n    }\n  }\n\n  return (\n    <TextInput\n      style={[styles.input, isDarkMode ? styles.dark : styles.light]}\n      placeholder=\"input\"\n      maxLength={3}\n      returnKeyType=\"done\"\n      keyboardType=\"numbers-and-punctuation\"\n      textAlign=\"center\"\n      onChangeText={(newText) => setAmount(Number(newText))}\n      onSubmitEditing={() => {\n        dispatch(updateAmount(amount));\n        changeAmountInput();\n      }}\n    />\n  );\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  input: {\n    padding: 8,\n    marginTop: 8,\n    marginRight: 10,\n    borderRadius: 10,\n    width: 100,\n    height: 40,\n    fontSize: 25,\n    textAlign: 'center',\n  },\n  dark: {\n    color: Colors['inputView'].wText,\n    backgroundColor: Colors['inputView'].wBackground,\n  },\n  light: {\n    color: Colors['inputView'].dText,\n    backgroundColor: Colors['inputView'].wBackground,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}