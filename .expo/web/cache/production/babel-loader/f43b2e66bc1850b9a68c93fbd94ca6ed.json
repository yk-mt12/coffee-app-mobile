{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import Constants from'expo-constants';import{Platform,UnavailabilityError}from'expo-modules-core';import invariant from'invariant';import qs from'qs';import{useEffect,useState}from'react';import URL from'url-parse';import NativeLinking from\"./ExpoLinking\";import{hasCustomScheme,resolveScheme}from\"./Schemes\";function validateURL(url){invariant(typeof url==='string','Invalid URL: should be a string. Was: '+url);invariant(url,'Invalid URL: cannot be empty');}function getHostUri(){var _Constants$manifest,_Constants$manifest2,_Constants$manifest2$,_Constants$manifest2$2;if((_Constants$manifest=Constants.manifest)!=null&&_Constants$manifest.hostUri){return Constants.manifest.hostUri;}else if((_Constants$manifest2=Constants.manifest2)!=null&&(_Constants$manifest2$=_Constants$manifest2.extra)!=null&&(_Constants$manifest2$2=_Constants$manifest2$.expoClient)!=null&&_Constants$manifest2$2.hostUri){return Constants.manifest2.extra.expoClient.hostUri;}else if(!hasCustomScheme()){return removeScheme(Constants.linkingUri).replace(/\\/--($|\\/.*$)/,'');}else{return null;}}function isExpoHosted(){var _Constants$manifest3;var hostUri=getHostUri();return!!(hostUri&&(/^(.*\\.)?(expo\\.io|exp\\.host|exp\\.direct|expo\\.test)(:.*)?(\\/.*)?$/.test(hostUri)||(_Constants$manifest3=Constants.manifest)!=null&&_Constants$manifest3.developer));}function removeScheme(url){return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//,'');}function removePort(url){return url.replace(/(?=([a-zA-Z0-9+.-]+:\\/\\/)?[^/]):\\d+/,'');}function removeLeadingSlash(url){return url.replace(/^\\//,'');}function removeTrailingSlashAndQueryString(url){return url.replace(/\\/?\\?.*$/,'');}function ensureTrailingSlash(input,shouldAppend){var hasSlash=input.endsWith('/');if(hasSlash&&!shouldAppend){return input.substring(0,input.length-1);}else if(!hasSlash&&shouldAppend){return input+\"/\";}return input;}function ensureLeadingSlash(input,shouldAppend){var hasSlash=input.startsWith('/');if(hasSlash&&!shouldAppend){return input.substring(1);}else if(!hasSlash&&shouldAppend){return\"/\"+input;}return input;}export function makeUrl(){var path=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';var queryParams=arguments.length>1?arguments[1]:undefined;var scheme=arguments.length>2?arguments[2]:undefined;return createURL(path,{queryParams:queryParams,scheme:scheme,isTripleSlashed:true});}export function createURL(path){var _ref=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},scheme=_ref.scheme,_ref$queryParams=_ref.queryParams,queryParams=_ref$queryParams===void 0?{}:_ref$queryParams,_ref$isTripleSlashed=_ref.isTripleSlashed,isTripleSlashed=_ref$isTripleSlashed===void 0?false:_ref$isTripleSlashed;if(Platform.OS==='web'){if(!Platform.isDOMAvailable)return'';var origin=ensureTrailingSlash(window.location.origin,false);var _queryString=qs.stringify(queryParams);if(_queryString){_queryString=\"?\"+_queryString;}var outputPath=path;if(outputPath)outputPath=ensureLeadingSlash(path,true);return encodeURI(\"\"+origin+outputPath+_queryString);}var resolvedScheme=resolveScheme({scheme:scheme});var hostUri=getHostUri()||'';if(hasCustomScheme()&&isExpoHosted()){hostUri='';}if(path){if(isExpoHosted()&&hostUri){path=\"/--/\"+removeLeadingSlash(path);}if(isTripleSlashed&&!path.startsWith('/')){path=\"/\"+path;}}else{path='';}var queryString='';var queryStringMatchResult=hostUri.match(/(.*)\\?(.+)/);if(queryStringMatchResult){hostUri=queryStringMatchResult[1];queryString=queryStringMatchResult[2];var paramsFromHostUri={};try{var parsedParams=qs.parse(queryString);if(typeof parsedParams==='object'){paramsFromHostUri=parsedParams;}}catch(e){}queryParams=_objectSpread(_objectSpread({},queryParams),paramsFromHostUri);}queryString=qs.stringify(queryParams);if(queryString){queryString=\"?\"+queryString;}hostUri=ensureLeadingSlash(hostUri,!isTripleSlashed);return encodeURI(resolvedScheme+\":\"+(isTripleSlashed?'/':'')+\"/\"+hostUri+path+queryString);}export function parse(url){validateURL(url);var parsed=URL(url,true);for(var param in parsed.query){parsed.query[param]=decodeURIComponent(parsed.query[param]);}var queryParams=parsed.query;var hostUri=getHostUri()||'';var hostUriStripped=removePort(removeTrailingSlashAndQueryString(hostUri));var path=parsed.pathname||null;var hostname=parsed.hostname||null;var scheme=parsed.protocol||null;if(scheme){scheme=scheme.substring(0,scheme.length-1);}if(path){path=removeLeadingSlash(path);var expoPrefix=null;if(hostUriStripped){var parts=hostUriStripped.split('/');expoPrefix=parts.slice(1).concat(['--/']).join('/');}if(isExpoHosted()&&!hasCustomScheme()&&expoPrefix&&path.startsWith(expoPrefix)){path=path.substring(expoPrefix.length);hostname=null;}else if(path.indexOf('+')>-1){path=path.substring(path.indexOf('+')+1);}}return{hostname:hostname,path:path,queryParams:queryParams,scheme:scheme};}export function addEventListener(type,handler){NativeLinking.addEventListener(type,handler);}export function removeEventListener(type,handler){NativeLinking.removeEventListener(type,handler);}export function parseInitialURLAsync(){var initialUrl;return _regeneratorRuntime.async(function parseInitialURLAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(NativeLinking.getInitialURL());case 2:initialUrl=_context.sent;if(initialUrl){_context.next=5;break;}return _context.abrupt(\"return\",{scheme:null,hostname:null,path:null,queryParams:null});case 5:return _context.abrupt(\"return\",parse(initialUrl));case 6:case\"end\":return _context.stop();}}},null,null,null,Promise);}export function sendIntent(action,extras){return _regeneratorRuntime.async(function sendIntent$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(Platform.OS==='android')){_context2.next=4;break;}_context2.next=3;return _regeneratorRuntime.awrap(NativeLinking.sendIntent(action,extras));case 3:return _context2.abrupt(\"return\",_context2.sent);case 4:throw new UnavailabilityError('Linking','sendIntent');case 5:case\"end\":return _context2.stop();}}},null,null,null,Promise);}export function openSettings(){return _regeneratorRuntime.async(function openSettings$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!(Platform.OS==='web')){_context3.next=2;break;}throw new UnavailabilityError('Linking','openSettings');case 2:if(!NativeLinking.openSettings){_context3.next=6;break;}_context3.next=5;return _regeneratorRuntime.awrap(NativeLinking.openSettings());case 5:return _context3.abrupt(\"return\",_context3.sent);case 6:_context3.next=8;return _regeneratorRuntime.awrap(openURL('app-settings:'));case 8:case\"end\":return _context3.stop();}}},null,null,null,Promise);}export function getInitialURL(){var _await$NativeLinking$;return _regeneratorRuntime.async(function getInitialURL$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return _regeneratorRuntime.awrap(NativeLinking.getInitialURL());case 2:_context4.t0=_await$NativeLinking$=_context4.sent;if(!(_context4.t0!=null)){_context4.next=7;break;}_context4.t1=_await$NativeLinking$;_context4.next=8;break;case 7:_context4.t1=null;case 8:return _context4.abrupt(\"return\",_context4.t1);case 9:case\"end\":return _context4.stop();}}},null,null,null,Promise);}export function openURL(url){return _regeneratorRuntime.async(function openURL$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:validateURL(url);_context5.next=3;return _regeneratorRuntime.awrap(NativeLinking.openURL(url));case 3:return _context5.abrupt(\"return\",_context5.sent);case 4:case\"end\":return _context5.stop();}}},null,null,null,Promise);}export function canOpenURL(url){return _regeneratorRuntime.async(function canOpenURL$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:validateURL(url);_context6.next=3;return _regeneratorRuntime.awrap(NativeLinking.canOpenURL(url));case 3:return _context6.abrupt(\"return\",_context6.sent);case 4:case\"end\":return _context6.stop();}}},null,null,null,Promise);}export function useURL(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),url=_useState2[0],setLink=_useState2[1];function onChange(event){setLink(event.url);}useEffect(function(){getInitialURL().then(function(url){return setLink(url);});addEventListener('url',onChange);return function(){return removeEventListener('url',onChange);};},[]);return url;}export*from\"./Linking.types\";","map":{"version":3,"sources":["../src/Linking.ts"],"names":[],"mappings":"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","sourcesContent":["import Constants from 'expo-constants';\nimport { Platform, UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\nimport qs from 'qs';\nimport { useEffect, useState } from 'react';\nimport URL from 'url-parse';\n\nimport NativeLinking from './ExpoLinking';\nimport {\n  CreateURLOptions,\n  ParsedURL,\n  QueryParams,\n  SendIntentExtras,\n  URLListener,\n} from './Linking.types';\nimport { hasCustomScheme, resolveScheme } from './Schemes';\n\nfunction validateURL(url: string): void {\n  invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n  invariant(url, 'Invalid URL: cannot be empty');\n}\n\nfunction getHostUri(): string | null {\n  if (Constants.manifest?.hostUri) {\n    return Constants.manifest.hostUri;\n  } else if (Constants.manifest2?.extra?.expoClient?.hostUri) {\n    return Constants.manifest2.extra.expoClient.hostUri;\n  } else if (!hasCustomScheme()) {\n    // we're probably not using up-to-date xdl, so just fake it for now\n    // we have to remove the /--/ on the end since this will be inserted again later\n    return removeScheme(Constants.linkingUri).replace(/\\/--($|\\/.*$)/, '');\n  } else {\n    return null;\n  }\n}\n\nfunction isExpoHosted(): boolean {\n  const hostUri = getHostUri();\n  return !!(\n    hostUri &&\n    (/^(.*\\.)?(expo\\.io|exp\\.host|exp\\.direct|expo\\.test)(:.*)?(\\/.*)?$/.test(hostUri) ||\n      Constants.manifest?.developer)\n  );\n}\n\nfunction removeScheme(url: string): string {\n  return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n}\n\nfunction removePort(url: string): string {\n  return url.replace(/(?=([a-zA-Z0-9+.-]+:\\/\\/)?[^/]):\\d+/, '');\n}\n\nfunction removeLeadingSlash(url: string): string {\n  return url.replace(/^\\//, '');\n}\n\nfunction removeTrailingSlashAndQueryString(url: string): string {\n  return url.replace(/\\/?\\?.*$/, '');\n}\n\nfunction ensureTrailingSlash(input: string, shouldAppend: boolean): string {\n  const hasSlash = input.endsWith('/');\n  if (hasSlash && !shouldAppend) {\n    return input.substring(0, input.length - 1);\n  } else if (!hasSlash && shouldAppend) {\n    return `${input}/`;\n  }\n  return input;\n}\n\nfunction ensureLeadingSlash(input: string, shouldAppend: boolean): string {\n  const hasSlash = input.startsWith('/');\n  if (hasSlash && !shouldAppend) {\n    return input.substring(1);\n  } else if (!hasSlash && shouldAppend) {\n    return `/${input}`;\n  }\n  return input;\n}\n\n// @needsAudit\n/**\n * Create a URL that works for the environment the app is currently running in.\n * The scheme in bare and standalone must be defined in the app.json under `expo.scheme`.\n *\n * # Examples\n * - Bare: empty string\n * - Standalone, Custom: `yourscheme:///path`\n * - Web (dev): `https://localhost:19006/path`\n * - Web (prod): `https://myapp.com/path`\n * - Expo Client (dev): `exp://128.0.0.1:19000/--/path`\n * - Expo Client (prod): `exp://exp.host/@yourname/your-app/--/path`\n *\n * @param path addition path components to append to the base URL.\n * @param queryParams An object with a set of query parameters. These will be merged with any\n * Expo-specific parameters that are needed (e.g. release channel) and then appended to the URL\n * as a query string.\n * @param scheme Optional URI protocol to use in the URL `<scheme>:///`, when `undefined` the scheme\n * will be chosen from the Expo config (`app.config.js` or `app.json`).\n * @return A URL string which points to your app with the given deep link information.\n * @deprecated An alias for [`createURL()`](#linkingcreateurlpath-namedparameters). This method is\n * deprecated and will be removed in a future SDK version.\n */\nexport function makeUrl(path: string = '', queryParams?: QueryParams, scheme?: string): string {\n  return createURL(path, { queryParams, scheme, isTripleSlashed: true });\n}\n\n// @needsAudit\n/**\n * Helper method for constructing a deep link into your app, given an optional path and set of query\n * parameters. Creates a URI scheme with two slashes by default.\n *\n * The scheme in bare and standalone must be defined in the Expo config (`app.config.js` or `app.json`)\n * under `expo.scheme`.\n *\n * # Examples\n * - Bare: `<scheme>://path` - uses provided scheme or scheme from Expo config `scheme`.\n * - Standalone, Custom: `yourscheme://path`\n * - Web (dev): `https://localhost:19006/path`\n * - Web (prod): `https://myapp.com/path`\n * - Expo Client (dev): `exp://128.0.0.1:19000/--/path`\n * - Expo Client (prod): `exp://exp.host/@yourname/your-app/--/path`\n *\n * @param path Addition path components to append to the base URL.\n * @param namedParameters Additional options object.\n * @return A URL string which points to your app with the given deep link information.\n */\nexport function createURL(\n  path: string,\n  { scheme, queryParams = {}, isTripleSlashed = false }: CreateURLOptions = {}\n): string {\n  if (Platform.OS === 'web') {\n    if (!Platform.isDOMAvailable) return '';\n\n    const origin = ensureTrailingSlash(window.location.origin, false);\n    let queryString = qs.stringify(queryParams);\n    if (queryString) {\n      queryString = `?${queryString}`;\n    }\n\n    let outputPath = path;\n    if (outputPath) outputPath = ensureLeadingSlash(path, true);\n\n    return encodeURI(`${origin}${outputPath}${queryString}`);\n  }\n\n  const resolvedScheme = resolveScheme({ scheme });\n\n  let hostUri = getHostUri() || '';\n\n  if (hasCustomScheme() && isExpoHosted()) {\n    hostUri = '';\n  }\n\n  if (path) {\n    if (isExpoHosted() && hostUri) {\n      path = `/--/${removeLeadingSlash(path)}`;\n    }\n    if (isTripleSlashed && !path.startsWith('/')) {\n      path = `/${path}`;\n    }\n  } else {\n    path = '';\n  }\n\n  // merge user-provided query params with any that were already in the hostUri\n  // e.g. release-channel\n  let queryString = '';\n  const queryStringMatchResult = hostUri.match(/(.*)\\?(.+)/);\n  if (queryStringMatchResult) {\n    hostUri = queryStringMatchResult[1];\n    queryString = queryStringMatchResult[2];\n    let paramsFromHostUri = {};\n    try {\n      const parsedParams = qs.parse(queryString);\n      if (typeof parsedParams === 'object') {\n        paramsFromHostUri = parsedParams;\n      }\n    } catch (e) {}\n    queryParams = {\n      ...queryParams,\n      ...paramsFromHostUri,\n    };\n  }\n  queryString = qs.stringify(queryParams);\n  if (queryString) {\n    queryString = `?${queryString}`;\n  }\n\n  hostUri = ensureLeadingSlash(hostUri, !isTripleSlashed);\n\n  return encodeURI(\n    `${resolvedScheme}:${isTripleSlashed ? '/' : ''}/${hostUri}${path}${queryString}`\n  );\n}\n\n// @needsAudit\n/**\n * Helper method for parsing out deep link information from a URL.\n * @param url A URL that points to the currently running experience (e.g. an output of `Linking.createURL()`).\n * @return A `ParsedURL` object.\n */\nexport function parse(url: string): ParsedURL {\n  validateURL(url);\n\n  const parsed = URL(url, /* parseQueryString */ true);\n\n  for (const param in parsed.query) {\n    parsed.query[param] = decodeURIComponent(parsed.query[param]!);\n  }\n  const queryParams = parsed.query;\n\n  const hostUri = getHostUri() || '';\n  const hostUriStripped = removePort(removeTrailingSlashAndQueryString(hostUri));\n\n  let path = parsed.pathname || null;\n  let hostname = parsed.hostname || null;\n  let scheme = parsed.protocol || null;\n\n  if (scheme) {\n    // Remove colon at end\n    scheme = scheme.substring(0, scheme.length - 1);\n  }\n\n  if (path) {\n    path = removeLeadingSlash(path);\n\n    let expoPrefix: string | null = null;\n    if (hostUriStripped) {\n      const parts = hostUriStripped.split('/');\n      expoPrefix = parts.slice(1).concat(['--/']).join('/');\n    }\n\n    if (isExpoHosted() && !hasCustomScheme() && expoPrefix && path.startsWith(expoPrefix)) {\n      path = path.substring(expoPrefix.length);\n      hostname = null;\n    } else if (path.indexOf('+') > -1) {\n      path = path.substring(path.indexOf('+') + 1);\n    }\n  }\n\n  return {\n    hostname,\n    path,\n    queryParams,\n    scheme,\n  };\n}\n\n// @needsAudit\n/**\n * Add a handler to `Linking` changes by listening to the `url` event type and providing the handler.\n * It is recommended to use the [`useURL()`](#useurl) hook instead.\n * @param type The only valid type is `'url'`.\n * @param handler An [`URLListener`](#urllistener) function that takes an `event` object of the type\n * [`EventType`](#eventype).\n * @see [React Native Docs Linking page](https://reactnative.dev/docs/linking#addeventlistener).\n */\nexport function addEventListener(type: string, handler: URLListener): void {\n  NativeLinking.addEventListener(type, handler);\n}\n\n/**\n * Remove a handler by passing the `url` event type and the handler.\n * @param type The only valid type is `'url'`.\n * @param handler An [`URLListener`](#urllistener) function that takes an `event` object of the type\n * [`EventType`](#eventype).\n * @see [React Native Docs Linking page](https://reactnative.dev/docs/linking#removeeventlistener).\n */\nexport function removeEventListener(type: string, handler: URLListener): void {\n  NativeLinking.removeEventListener(type, handler);\n}\n\n// @needsAudit\n/**\n * Helper method which wraps React Native's `Linking.getInitialURL()` in `Linking.parse()`.\n * Parses the deep link information out of the URL used to open the experience initially.\n * If no link opened the app, all the fields will be `null`.\n * > On the web it parses the current window URL.\n * @return A promise that resolves with `ParsedURL` object.\n */\nexport async function parseInitialURLAsync(): Promise<ParsedURL> {\n  const initialUrl = await NativeLinking.getInitialURL();\n  if (!initialUrl) {\n    return {\n      scheme: null,\n      hostname: null,\n      path: null,\n      queryParams: null,\n    };\n  }\n\n  return parse(initialUrl);\n}\n\n// @needsAudit\n/**\n * Launch an Android intent with extras.\n * > Use [IntentLauncher](../intent-launcher) instead, `sendIntent` is only included in\n * > `Linking` for API compatibility with React Native's Linking API.\n * @platform android\n */\nexport async function sendIntent(action: string, extras?: SendIntentExtras[]): Promise<void> {\n  if (Platform.OS === 'android') {\n    return await NativeLinking.sendIntent(action, extras);\n  }\n  throw new UnavailabilityError('Linking', 'sendIntent');\n}\n\n// @needsAudit\n/**\n * Open the operating system settings app and displays the app’s custom settings, if it has any.\n * @platform ios\n */\nexport async function openSettings(): Promise<void> {\n  if (Platform.OS === 'web') {\n    throw new UnavailabilityError('Linking', 'openSettings');\n  }\n  if (NativeLinking.openSettings) {\n    return await NativeLinking.openSettings();\n  }\n  await openURL('app-settings:');\n}\n\n// @needsAudit\n/**\n * Get the URL that was used to launch the app if it was launched by a link.\n * @return The URL string that launched your app, or `null`.\n */\nexport async function getInitialURL(): Promise<string | null> {\n  return (await NativeLinking.getInitialURL()) ?? null;\n}\n\n// @needsAudit\n/**\n * Attempt to open the given URL with an installed app. See the [Linking guide](/guides/linking)\n * for more information.\n * @param url A URL for the operating system to open, eg: `tel:5555555`, `exp://`.\n * @return A `Promise` that is fulfilled with `true` if the link is opened operating system\n * automatically or the user confirms the prompt to open the link. The `Promise` rejects if there\n * are no applications registered for the URL or the user cancels the dialog.\n */\nexport async function openURL(url: string): Promise<true> {\n  validateURL(url);\n  return await NativeLinking.openURL(url);\n}\n\n// @needsAudit\n/**\n * Determine whether or not an installed app can handle a given URL.\n * On web this always returns `true` because there is no API for detecting what URLs can be opened.\n * @param url The URL that you want to test can be opened.\n * @return A `Promise` object that is fulfilled with `true` if the URL can be handled, otherwise it\n * `false` if not.\n *\n * The `Promise` will reject on Android if it was impossible to check if the URL can be opened, and\n * on iOS if you didn't [add the specific scheme in the `LSApplicationQueriesSchemes` key inside **Info.plist**](/guides/linking#opening-links-to-other-apps).\n */\nexport async function canOpenURL(url: string): Promise<boolean> {\n  validateURL(url);\n  return await NativeLinking.canOpenURL(url);\n}\n\n// @needsAudit\n/**\n * Returns the initial URL followed by any subsequent changes to the URL.\n * @return Returns the initial URL or `null`.\n */\nexport function useURL(): string | null {\n  const [url, setLink] = useState<string | null>(null);\n\n  function onChange(event: { url: string }) {\n    setLink(event.url);\n  }\n\n  useEffect(() => {\n    getInitialURL().then((url) => setLink(url));\n    addEventListener('url', onChange);\n    return () => removeEventListener('url', onChange);\n  }, []);\n\n  return url;\n}\n\nexport * from './Linking.types';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}