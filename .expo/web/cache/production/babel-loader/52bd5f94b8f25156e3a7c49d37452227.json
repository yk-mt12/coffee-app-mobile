{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{memo,useState}from'react';import TextInput from\"react-native-web/dist/exports/TextInput\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import useColorScheme from\"react-native-web/dist/exports/useColorScheme\";import{useDispatch,useSelector}from'react-redux';import Colors from\"../../constants/Colors\";import{calculateWater,updateAmount,calculateIceCoffeeWater}from\"../../../redux/coffeeSlice\";import{jsx as _jsx}from\"react/jsx-runtime\";export var AmountInput=memo(function(){var dispatch=useDispatch();var isDarkMode=useColorScheme()==='dark';var _useState=useState(0),_useState2=_slicedToArray(_useState,2),amount=_useState2[0],setAmount=_useState2[1];var nowScreen=useSelector(function(state){return state.screen.nowScreen;});return _jsx(TextInput,{style:[styles.input,isDarkMode?styles.dark:styles.light],placeholder:\"input\",maxLength:3,returnKeyType:\"done\",keyboardType:\"numbers-and-punctuation\",textAlign:\"center\",onChangeText:function onChangeText(newText){return setAmount(Number(newText));},onSubmitEditing:function onSubmitEditing(){dispatch(updateAmount(amount));if(nowScreen==='cafeAuLait'||nowScreen==='normal'){dispatch(calculateWater(amount));}else if(nowScreen==='iceCoffee'){dispatch(calculateIceCoffeeWater(amount));}}});});var styles=StyleSheet.create({container:{flex:1},input:{padding:8,marginTop:8,borderRadius:10,width:100,height:40,fontSize:25,textAlign:'center'},dark:{color:Colors['inputView'].wText,backgroundColor:Colors['inputView'].wBackground},light:{color:Colors['inputView'].dText,backgroundColor:Colors['inputView'].wBackground}});","map":{"version":3,"sources":["/Users/yukim/programming/my-app/coffee-app-mobile/src/components/Input/AmountInput.tsx"],"names":["memo","useState","useDispatch","useSelector","Colors","calculateWater","updateAmount","calculateIceCoffeeWater","AmountInput","dispatch","isDarkMode","useColorScheme","amount","setAmount","nowScreen","state","screen","styles","input","dark","light","newText","Number","StyleSheet","create","container","flex","padding","marginTop","borderRadius","width","height","fontSize","textAlign","color","wText","backgroundColor","wBackground","dText"],"mappings":"iEAAA,OAASA,IAAT,CAAeC,QAAf,KAA+B,OAA/B,C,yMAEA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,MAAOC,CAAAA,MAAP,8BAEA,OAASC,cAAT,CAAyBC,YAAzB,CAAuCC,uBAAvC,kC,2CAEA,MAAO,IAAMC,CAAAA,WAAW,CAAGR,IAAI,CAAC,UAAM,CACpC,GAAMS,CAAAA,QAAQ,CAAGP,WAAW,EAA5B,CACA,GAAMQ,CAAAA,UAAU,CAAGC,cAAc,KAAO,MAAxC,CACA,cAA4BV,QAAQ,CAAS,CAAT,CAApC,wCAAOW,MAAP,eAAeC,SAAf,eACA,GAAMC,CAAAA,SAAS,CAAGX,WAAW,CAAC,SAACY,KAAD,QAAWA,CAAAA,KAAK,CAACC,MAAN,CAAaF,SAAxB,EAAD,CAA7B,CAEA,MACE,MAAC,SAAD,EACE,KAAK,CAAE,CAACG,MAAM,CAACC,KAAR,CAAeR,UAAU,CAAGO,MAAM,CAACE,IAAV,CAAiBF,MAAM,CAACG,KAAjD,CADT,CAEE,WAAW,CAAC,OAFd,CAGE,SAAS,CAAE,CAHb,CAIE,aAAa,CAAC,MAJhB,CAKE,YAAY,CAAC,yBALf,CAME,SAAS,CAAC,QANZ,CAOE,YAAY,CAAE,sBAACC,OAAD,QAAaR,CAAAA,SAAS,CAACS,MAAM,CAACD,OAAD,CAAP,CAAtB,EAPhB,CAQE,eAAe,CAAE,0BAAM,CACrBZ,QAAQ,CAACH,YAAY,CAACM,MAAD,CAAb,CAAR,CACA,GAAIE,SAAS,GAAK,YAAd,EAA8BA,SAAS,GAAK,QAAhD,CAA0D,CACxDL,QAAQ,CAACJ,cAAc,CAACO,MAAD,CAAf,CAAR,CACD,CAFD,IAEO,IAAIE,SAAS,GAAK,WAAlB,CAA+B,CACpCL,QAAQ,CAACF,uBAAuB,CAACK,MAAD,CAAxB,CAAR,CACD,CACF,CAfH,EADF,CAmBD,CAzB8B,CAAxB,CA2BP,GAAMK,CAAAA,MAAM,CAAGM,UAAU,CAACC,MAAX,CAAkB,CAC/BC,SAAS,CAAE,CACTC,IAAI,CAAE,CADG,CADoB,CAI/BR,KAAK,CAAE,CACLS,OAAO,CAAE,CADJ,CAELC,SAAS,CAAE,CAFN,CAGLC,YAAY,CAAE,EAHT,CAILC,KAAK,CAAE,GAJF,CAKLC,MAAM,CAAE,EALH,CAMLC,QAAQ,CAAE,EANL,CAOLC,SAAS,CAAE,QAPN,CAJwB,CAa/Bd,IAAI,CAAE,CACJe,KAAK,CAAE9B,MAAM,CAAC,WAAD,CAAN,CAAoB+B,KADvB,CAEJC,eAAe,CAAEhC,MAAM,CAAC,WAAD,CAAN,CAAoBiC,WAFjC,CAbyB,CAiB/BjB,KAAK,CAAE,CACLc,KAAK,CAAE9B,MAAM,CAAC,WAAD,CAAN,CAAoBkC,KADtB,CAELF,eAAe,CAAEhC,MAAM,CAAC,WAAD,CAAN,CAAoBiC,WAFhC,CAjBwB,CAAlB,CAAf","sourcesContent":["import { memo, useState } from 'react';\nimport { TextInput, StyleSheet, useColorScheme, SafeAreaView, Switch } from 'react-native';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Colors from '../../constants/Colors';\n\nimport { calculateWater, updateAmount, calculateIceCoffeeWater } from '../../../redux/coffeeSlice';\n\nexport const AmountInput = memo(() => {\n  const dispatch = useDispatch();\n  const isDarkMode = useColorScheme() === 'dark';\n  const [amount, setAmount] = useState<number>(0);\n  const nowScreen = useSelector((state) => state.screen.nowScreen);\n\n  return (\n    <TextInput\n      style={[styles.input, isDarkMode ? styles.dark : styles.light]}\n      placeholder=\"input\"\n      maxLength={3}\n      returnKeyType=\"done\"\n      keyboardType=\"numbers-and-punctuation\"\n      textAlign=\"center\"\n      onChangeText={(newText) => setAmount(Number(newText))}\n      onSubmitEditing={() => {\n        dispatch(updateAmount(amount));\n        if (nowScreen === 'cafeAuLait' || nowScreen === 'normal') {\n          dispatch(calculateWater(amount));\n        } else if (nowScreen === 'iceCoffee') {\n          dispatch(calculateIceCoffeeWater(amount));\n        }\n      }}\n    />\n  );\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  input: {\n    padding: 8,\n    marginTop: 8,\n    borderRadius: 10,\n    width: 100,\n    height: 40,\n    fontSize: 25,\n    textAlign: 'center',\n  },\n  dark: {\n    color: Colors['inputView'].wText,\n    backgroundColor: Colors['inputView'].wBackground,\n  },\n  light: {\n    color: Colors['inputView'].dText,\n    backgroundColor: Colors['inputView'].wBackground,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}