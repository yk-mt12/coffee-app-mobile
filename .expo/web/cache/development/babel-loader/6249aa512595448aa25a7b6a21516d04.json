{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { memo, useState } from 'react';\nimport { Text, View } from \"../Themed\";\nimport { Stopwatch } from 'react-native-stopwatch-timer';\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Colors from \"../../constants/Colors\";\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport var TimerView = memo(function () {\n  var isDarkMode = useColorScheme() === 'dark';\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isStopwatchStart = _useState2[0],\n      setIsStopwatchStart = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      resetStopwatch = _useState4[0],\n      setResetStopwatch = _useState4[1];\n\n  var styles = StyleSheet.create({\n    container: {\n      marginTop: 15\n    },\n    sectionStyle: {},\n    button: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      marginTop: 10,\n      marginHorizontal: 40\n    },\n    buttonText: {\n      fontSize: 20,\n      color: isDarkMode ? Colors['timerResetButton'].dText : Colors['timerResetButton'].wText\n    },\n    dark: {\n      color: Colors['inputView'].wText\n    },\n    light: {\n      color: Colors['inputView'].dText\n    },\n    startButton: {\n      width: 80,\n      height: 80,\n      justifyContent: 'center',\n      alignItems: 'center',\n      padding: 10,\n      borderRadius: 100,\n      backgroundColor: isDarkMode ? Colors['timerButtonDark'].startBackground : Colors['timerButtonLight'].startBackground\n    },\n    startText: {\n      color: isDarkMode ? Colors['timerButtonDark'].startText : Colors['timerButtonLight'].startText\n    },\n    stopButton: {\n      backgroundColor: isDarkMode ? Colors['timerButtonDark'].stopBackground : Colors['timerButtonLight'].stopBackground,\n      width: 80,\n      height: 80,\n      justifyContent: 'center',\n      alignItems: 'center',\n      padding: 10,\n      borderRadius: 100\n    },\n    stopText: {\n      color: isDarkMode ? Colors['timerButtonDark'].stopText : Colors['timerButtonLight'].stopText\n    },\n    resetButton: {\n      backgroundColor: Colors['timerResetButton'].background,\n      width: 80,\n      height: 80,\n      justifyContent: 'center',\n      alignItems: 'center',\n      padding: 10,\n      borderRadius: 100\n    }\n  });\n  var options = {\n    container: {\n      padding: 20,\n      borderRadius: 4,\n      width: '98%',\n      alignItems: 'center'\n    },\n    text: {\n      fontSize: 84,\n      fontWeight: '300',\n      color: isDarkMode ? Colors['dark'].text : Colors['light'].text,\n      margin: 20\n    }\n  };\n  return _jsx(_Fragment, {\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(View, {\n        style: [styles.sectionStyle, isDarkMode ? styles.dark : styles.light],\n        children: _jsx(Stopwatch, {\n          start: isStopwatchStart,\n          reset: resetStopwatch,\n          options: options,\n          style: isDarkMode ? styles.dark : styles.light\n        })\n      }), _jsxs(View, {\n        style: [styles.button],\n        children: [_jsx(TouchableHighlight, {\n          onPress: function onPress() {\n            setIsStopwatchStart(false);\n            setResetStopwatch(true);\n          },\n          style: [styles.resetButton],\n          children: _jsx(Text, {\n            style: [styles.buttonText],\n            children: \"RESET\"\n          })\n        }), _jsx(TouchableHighlight, {\n          onPress: function onPress() {\n            setIsStopwatchStart(!isStopwatchStart);\n            setResetStopwatch(false);\n          },\n          style: [isStopwatchStart ? styles.stopButton : styles.startButton],\n          children: _jsx(Text, {\n            style: [styles.buttonText, isStopwatchStart ? styles.stopText : styles.startText],\n            children: !isStopwatchStart ? 'START' : 'STOP'\n          })\n        })]\n      })]\n    })\n  });\n});","map":{"version":3,"sources":["/Users/yukim/develop/react-native/coffee-app/components/View/TimerView.tsx"],"names":["React","memo","useState","Text","View","Stopwatch","Colors","TimerView","isDarkMode","useColorScheme","isStopwatchStart","setIsStopwatchStart","resetStopwatch","setResetStopwatch","styles","StyleSheet","create","container","marginTop","sectionStyle","button","flexDirection","justifyContent","marginHorizontal","buttonText","fontSize","color","dText","wText","dark","light","startButton","width","height","alignItems","padding","borderRadius","backgroundColor","startBackground","startText","stopButton","stopBackground","stopText","resetButton","background","options","text","fontWeight","margin"],"mappings":"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","sourcesContent":["import React, { memo, useEffect, useState } from 'react';\nimport { Text, View } from '../Themed';\nimport { Stopwatch } from 'react-native-stopwatch-timer';\nimport { TouchableHighlight, StyleSheet } from 'react-native';\nimport Colors from '../../constants/Colors';\nimport { useColorScheme } from 'react-native';\n\nexport const TimerView = memo(() => {\n  const isDarkMode = useColorScheme() === 'dark';\n  const [isStopwatchStart, setIsStopwatchStart] = useState(false);\n  const [resetStopwatch, setResetStopwatch] = useState(false);\n\n  const styles = StyleSheet.create({\n    container: {\n      marginTop: 15,\n    },\n    sectionStyle: {},\n    button: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      marginTop: 10,\n      marginHorizontal: 40,\n    },\n    buttonText: {\n      fontSize: 20,\n      color: isDarkMode ? Colors['timerResetButton'].\n      dText : Colors['timerResetButton'].wText,\n    },\n    dark: {\n      color: Colors['inputView'].wText,\n      // backgroundColor: Colors['inputView'].wBackground,\n    },\n    light: {\n      color: Colors['inputView'].dText,\n      // backgroundColor: Colors['inputView'].wBackground,\n    },\n    startButton: {\n      width: 80,\n      height: 80,\n      justifyContent: 'center',\n      alignItems: 'center',\n      padding: 10,\n      borderRadius: 100,\n\n      backgroundColor: isDarkMode\n        ? Colors['timerButtonDark'].startBackground\n        : Colors['timerButtonLight'].startBackground,\n    },\n    startText: {\n      color: isDarkMode\n        ? Colors['timerButtonDark'].startText\n        : Colors['timerButtonLight'].startText,\n    },\n    stopButton: {\n      backgroundColor: isDarkMode\n        ? Colors['timerButtonDark'].stopBackground\n        : Colors['timerButtonLight'].stopBackground,\n      width: 80,\n      height: 80,\n      justifyContent: 'center',\n      alignItems: 'center',\n      padding: 10,\n      borderRadius: 100,\n    },\n    stopText: {\n      color: isDarkMode ? Colors['timerButtonDark'].stopText : Colors['timerButtonLight'].stopText,\n    },\n    resetButton: {\n      backgroundColor: Colors['timerResetButton'].background,\n      width: 80,\n      height: 80,\n      justifyContent: 'center',\n      alignItems: 'center',\n      padding: 10,\n      borderRadius: 100,\n    },\n  });\n\n  const options = {\n    container: {\n      padding: 20,\n      borderRadius: 4,\n      width: '98%',\n      alignItems: 'center',\n    },\n    text: {\n      fontSize: 84,\n      fontWeight: '300',\n      color: isDarkMode ? Colors['dark'].text : Colors['light'].text,\n      margin: 20,\n    },\n  };\n\n  return (\n    <>\n      <View style={styles.container}>\n        <View style={[styles.sectionStyle, isDarkMode ? styles.dark : styles.light]}>\n          <Stopwatch\n            start={isStopwatchStart}\n            reset={resetStopwatch}\n            options={options}\n            style={isDarkMode ? styles.dark : styles.light}\n          />\n        </View>\n        <View style={[styles.button]}>\n          <TouchableHighlight\n            onPress={() => {\n              setIsStopwatchStart(false);\n              setResetStopwatch(true);\n            }}\n            style={[styles.resetButton]}>\n            <Text style={[styles.buttonText]}>RESET</Text>\n          </TouchableHighlight>\n          <TouchableHighlight\n            onPress={() => {\n              setIsStopwatchStart(!isStopwatchStart);\n              setResetStopwatch(false);\n            }}\n            style={[isStopwatchStart ? styles.stopButton : styles.startButton]}>\n            <Text\n              style={[styles.buttonText, isStopwatchStart ? styles.stopText : styles.startText]}>\n              {!isStopwatchStart ? 'START' : 'STOP'}\n            </Text>\n          </TouchableHighlight>\n        </View>\n      </View>\n    </>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}