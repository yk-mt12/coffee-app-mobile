{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport PropTypes from 'prop-types';\nimport { formatTimeString } from \"./utils\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar Timer = function (_Component) {\n  _inherits(Timer, _Component);\n\n  var _super = _createSuper(Timer);\n\n  function Timer(props) {\n    var _this;\n\n    _classCallCheck(this, Timer);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      started: false,\n      remainingTime: props.totalDuration\n    };\n    _this.start = _this.start.bind(_assertThisInitialized(_this));\n    _this.stop = _this.stop.bind(_assertThisInitialized(_this));\n    _this.reset = _this.reset.bind(_assertThisInitialized(_this));\n    _this.formatTime = _this.formatTime.bind(_assertThisInitialized(_this));\n    var width = props.msecs ? 220 : 150;\n    _this.defaultStyles = {\n      container: {\n        backgroundColor: '#000',\n        padding: 5,\n        borderRadius: 5,\n        width: width\n      },\n      text: {\n        fontSize: 30,\n        color: '#FFF',\n        marginLeft: 7\n      }\n    };\n    return _this;\n  }\n\n  _createClass(Timer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.start) {\n        this.start();\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(newProps) {\n      if (newProps.start) {\n        this.start();\n      } else {\n        this.stop();\n      }\n\n      if (newProps.reset) {\n        this.reset(newProps.totalDuration);\n      }\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      var _this2 = this;\n\n      var handleFinish = this.props.handleFinish ? this.props.handleFinish : function () {\n        return alert(\"Timer Finished\");\n      };\n      var endTime = new Date().getTime() + this.state.remainingTime;\n      this.interval = setInterval(function () {\n        var remaining = endTime - new Date();\n\n        if (remaining <= 1000) {\n          _this2.setState({\n            remainingTime: 0\n          });\n\n          _this2.stop();\n\n          handleFinish();\n          return;\n        }\n\n        _this2.setState({\n          remainingTime: remaining\n        });\n      }, 1);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(newDuration) {\n      this.setState({\n        remainingTime: this.props.totalDuration !== newDuration ? newDuration : this.props.totalDuration\n      });\n    }\n  }, {\n    key: \"formatTime\",\n    value: function formatTime() {\n      var _this$props = this.props,\n          getTime = _this$props.getTime,\n          getMsecs = _this$props.getMsecs,\n          msecs = _this$props.msecs;\n      var now = this.state.remainingTime;\n      var formatted = formatTimeString(now, msecs);\n\n      if (typeof getTime === \"function\") {\n        getTime(formatted);\n      }\n\n      if (typeof getMsecs === \"function\") {\n        getMsecs(now);\n      }\n\n      return formatted;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var styles = this.props.options ? this.props.options : this.defaultStyles;\n      return _jsx(View, {\n        style: styles.container,\n        children: _jsx(Text, {\n          style: styles.text,\n          children: this.formatTime()\n        })\n      });\n    }\n  }]);\n\n  return Timer;\n}(Component);\n\nTimer.propTypes = {\n  start: PropTypes.bool,\n  reset: PropTypes.bool,\n  msecs: PropTypes.bool,\n  options: PropTypes.object,\n  handleFinish: PropTypes.func,\n  totalDuration: PropTypes.number,\n  getTime: PropTypes.func,\n  getMsecs: PropTypes.func\n};\nexport default Timer;","map":{"version":3,"sources":["/Users/yukim/develop/react-native/coffee-app/node_modules/react-native-stopwatch-timer/lib/timer.js"],"names":["React","Component","PropTypes","formatTimeString","Timer","props","state","started","remainingTime","totalDuration","start","bind","stop","reset","formatTime","width","msecs","defaultStyles","container","backgroundColor","padding","borderRadius","text","fontSize","color","marginLeft","newProps","handleFinish","alert","endTime","Date","getTime","interval","setInterval","remaining","setState","clearInterval","newDuration","getMsecs","now","formatted","styles","options","propTypes","bool","object","func","number"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;;;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,gBAAT;;;IAEMC,K;;;;;AAYJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,KADE;AAEXC,MAAAA,aAAa,EAAEH,KAAK,CAACI;AAFV,KAAb;AAIA,UAAKC,KAAL,GAAa,MAAKA,KAAL,CAAWC,IAAX,+BAAb;AACA,UAAKC,IAAL,GAAY,MAAKA,IAAL,CAAUD,IAAV,+BAAZ;AACA,UAAKE,KAAL,GAAa,MAAKA,KAAL,CAAWF,IAAX,+BAAb;AACA,UAAKG,UAAL,GAAkB,MAAKA,UAAL,CAAgBH,IAAhB,+BAAlB;AACA,QAAMI,KAAK,GAAGV,KAAK,CAACW,KAAN,GAAc,GAAd,GAAoB,GAAlC;AACA,UAAKC,aAAL,GAAqB;AACnBC,MAAAA,SAAS,EAAE;AACTC,QAAAA,eAAe,EAAE,MADR;AAETC,QAAAA,OAAO,EAAE,CAFA;AAGTC,QAAAA,YAAY,EAAE,CAHL;AAITN,QAAAA,KAAK,EAAEA;AAJE,OADQ;AAOnBO,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAE,EADN;AAEJC,QAAAA,KAAK,EAAE,MAFH;AAGJC,QAAAA,UAAU,EAAE;AAHR;AAPa,KAArB;AAXiB;AAwBlB;;;;WAED,6BAAoB;AAClB,UAAG,KAAKpB,KAAL,CAAWK,KAAd,EAAqB;AACnB,aAAKA,KAAL;AACD;AACF;;;WAED,mCAA0BgB,QAA1B,EAAoC;AAElC,UAAGA,QAAQ,CAAChB,KAAZ,EAAmB;AACjB,aAAKA,KAAL;AACD,OAFD,MAEO;AACL,aAAKE,IAAL;AACD;;AACD,UAAGc,QAAQ,CAACb,KAAZ,EAAmB;AACjB,aAAKA,KAAL,CAAWa,QAAQ,CAACjB,aAApB;AACD;AACF;;;WAED,iBAAQ;AAAA;;AACN,UAAMkB,YAAY,GAAG,KAAKtB,KAAL,CAAWsB,YAAX,GAA0B,KAAKtB,KAAL,CAAWsB,YAArC,GAAoD;AAAA,eAAMC,KAAK,CAAC,gBAAD,CAAX;AAAA,OAAzE;AACA,UAAMC,OAAO,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,KAAKzB,KAAL,CAAWE,aAAlD;AACA,WAAKwB,QAAL,GAAgBC,WAAW,CAAC,YAAM;AAChC,YAAMC,SAAS,GAAGL,OAAO,GAAG,IAAIC,IAAJ,EAA5B;;AACA,YAAGI,SAAS,IAAI,IAAhB,EAAsB;AACpB,UAAA,MAAI,CAACC,QAAL,CAAc;AAAC3B,YAAAA,aAAa,EAAE;AAAhB,WAAd;;AACA,UAAA,MAAI,CAACI,IAAL;;AACAe,UAAAA,YAAY;AACZ;AACD;;AACD,QAAA,MAAI,CAACQ,QAAL,CAAc;AAAC3B,UAAAA,aAAa,EAAE0B;AAAhB,SAAd;AACD,OAT0B,EASxB,CATwB,CAA3B;AAUD;;;WAED,gBAAO;AACLE,MAAAA,aAAa,CAAC,KAAKJ,QAAN,CAAb;AACD;;;WAED,eAAMK,WAAN,EAAmB;AACjB,WAAKF,QAAL,CAAc;AACZ3B,QAAAA,aAAa,EACX,KAAKH,KAAL,CAAWI,aAAX,KAA6B4B,WAA7B,GACEA,WADF,GAEE,KAAKhC,KAAL,CAAWI;AAJH,OAAd;AAMD;;;WAED,sBAAa;AACX,wBAAqC,KAAKJ,KAA1C;AAAA,UAAQ0B,OAAR,eAAQA,OAAR;AAAA,UAAiBO,QAAjB,eAAiBA,QAAjB;AAAA,UAA2BtB,KAA3B,eAA2BA,KAA3B;AACA,UAAMuB,GAAG,GAAG,KAAKjC,KAAL,CAAWE,aAAvB;AACA,UAAMgC,SAAS,GAAGrC,gBAAgB,CAACoC,GAAD,EAAMvB,KAAN,CAAlC;;AACA,UAAI,OAAOe,OAAP,KAAmB,UAAvB,EAAmC;AACjCA,QAAAA,OAAO,CAACS,SAAD,CAAP;AACD;;AACD,UAAI,OAAOF,QAAP,KAAoB,UAAxB,EAAoC;AAClCA,QAAAA,QAAQ,CAACC,GAAD,CAAR;AACD;;AACD,aAAOC,SAAP;AACD;;;WAED,kBAAS;AAEP,UAAMC,MAAM,GAAG,KAAKpC,KAAL,CAAWqC,OAAX,GAAqB,KAAKrC,KAAL,CAAWqC,OAAhC,GAA0C,KAAKzB,aAA9D;AAEA,aACE,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEwB,MAAM,CAACvB,SAApB;AAAA,kBACE,KAAC,IAAD;AAAM,UAAA,KAAK,EAAEuB,MAAM,CAACnB,IAApB;AAAA,oBAA2B,KAAKR,UAAL;AAA3B;AADF,QADF;AAKD;;;;EA1GiBb,S;;AAAdG,K,CACGuC,S,GAAY;AACjBjC,EAAAA,KAAK,EAAER,SAAS,CAAC0C,IADA;AAEjB/B,EAAAA,KAAK,EAAEX,SAAS,CAAC0C,IAFA;AAGjB5B,EAAAA,KAAK,EAAEd,SAAS,CAAC0C,IAHA;AAIjBF,EAAAA,OAAO,EAAExC,SAAS,CAAC2C,MAJF;AAKjBlB,EAAAA,YAAY,EAAEzB,SAAS,CAAC4C,IALP;AAMjBrC,EAAAA,aAAa,EAAEP,SAAS,CAAC6C,MANR;AAOjBhB,EAAAA,OAAO,EAAE7B,SAAS,CAAC4C,IAPF;AAQjBR,EAAAA,QAAQ,EAAEpC,SAAS,CAAC4C;AARH,C;AA4GrB,eAAe1C,KAAf","sourcesContent":["import React, {Component} from 'react';\nimport {Text, View, StyleSheet} from 'react-native';\nimport PropTypes from 'prop-types';\nimport { formatTimeString } from './utils';\n\nclass Timer extends Component {\n  static propTypes = {\n    start: PropTypes.bool,\n    reset: PropTypes.bool,\n    msecs: PropTypes.bool,\n    options: PropTypes.object,\n    handleFinish: PropTypes.func,\n    totalDuration: PropTypes.number,\n    getTime: PropTypes.func,\n    getMsecs: PropTypes.func,\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      started: false,\n      remainingTime: props.totalDuration,\n    };\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.reset = this.reset.bind(this);\n    this.formatTime = this.formatTime.bind(this);\n    const width = props.msecs ? 220 : 150;\n    this.defaultStyles = {\n      container: {\n        backgroundColor: '#000',\n        padding: 5,\n        borderRadius: 5,\n        width: width,\n      },\n      text: {\n        fontSize: 30,\n        color: '#FFF',\n        marginLeft: 7,\n      }\n    };\n  }\n\n  componentDidMount() {\n    if(this.props.start) {\n      this.start();\n    }\n  }\n\n  componentWillReceiveProps(newProps) {\n\n    if(newProps.start) {\n      this.start();\n    } else {\n      this.stop();\n    }\n    if(newProps.reset) {\n      this.reset(newProps.totalDuration);\n    }\n  }\n\n  start() {\n    const handleFinish = this.props.handleFinish ? this.props.handleFinish : () => alert(\"Timer Finished\");\n    const endTime = new Date().getTime() + this.state.remainingTime;\n    this.interval = setInterval(() => {\n      const remaining = endTime - new Date();\n      if(remaining <= 1000) {\n        this.setState({remainingTime: 0});\n        this.stop();\n        handleFinish();\n        return;\n      }\n      this.setState({remainingTime: remaining});\n    }, 1);\n  }\n\n  stop() {\n    clearInterval(this.interval);\n  }\n\n  reset(newDuration) {\n    this.setState({\n      remainingTime: \n        this.props.totalDuration !== newDuration ? \n          newDuration : \n          this.props.totalDuration\n      });\n  }\n\n  formatTime() {\n    const { getTime, getMsecs, msecs } = this.props;\n    const now = this.state.remainingTime;\n    const formatted = formatTimeString(now, msecs);\n    if (typeof getTime === \"function\") {\n      getTime(formatted);\n    }\n    if (typeof getMsecs === \"function\") {\n      getMsecs(now)\n    }\n    return formatted;\n  }\n\n  render() {\n\n    const styles = this.props.options ? this.props.options : this.defaultStyles;\n\n    return(\n      <View style={styles.container}>\n        <Text style={styles.text}>{this.formatTime()}</Text>\n      </View>\n    );\n  }\n}\n\nexport default Timer;\n"]},"metadata":{},"sourceType":"module"}