{"ast":null,"code":"import React, { useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useIsFocused } from '@react-navigation/native';\nimport { View } from \"../components/Themed\";\nimport { LeftWater } from \"../components/View/LeftWater\";\nimport { RatioView } from \"../components/View/RatioVeiw\";\nimport { RightWater } from \"../components/View/RightWater\";\nimport { TimerView } from \"../components/View/TimerView\";\nimport Colors from \"../constants/Colors\";\nimport { changeScreen } from \"../redux/screenSlice\";\nimport { updateIceAmount, updateIceWater } from \"../redux/coffeeSlice\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function IceCoffee() {\n  var isLeftWater = useSelector(function (state) {\n    return state.coffee.isWater;\n  });\n  var dispatch = useDispatch();\n  var isForcused = useIsFocused();\n  useEffect(function () {\n    dispatch(changeScreen('iceCoffee'));\n    dispatch(updateIceAmount(0));\n    dispatch(updateIceWater(0));\n  }, [isForcused]);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: [styles.containerItem],\n      children: isLeftWater ? _jsx(_Fragment, {\n        children: _jsx(RightWater, {})\n      }) : _jsx(_Fragment, {\n        children: _jsx(LeftWater, {})\n      })\n    }), _jsx(View, {\n      style: styles.ratioContainer,\n      children: _jsx(RatioView, {})\n    }), _jsx(View, {\n      children: _jsx(TimerView, {})\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  containerItem: {\n    marginTop: 20,\n    padding: 10,\n    flexDirection: 'row'\n  },\n  ratioContainer: {\n    marginTop: 39,\n    padding: 10,\n    alignItems: 'center'\n  },\n  dark: {\n    color: Colors['dark'].text,\n    backgroundColor: Colors['dark'].background\n  },\n  light: {\n    color: Colors['light'].text,\n    backgroundColor: Colors['light'].background\n  }\n});","map":{"version":3,"sources":["/Users/yukim/develop/react-native/coffee-app/screens/IceCoffeeScreen.tsx"],"names":["React","useEffect","useDispatch","useSelector","useIsFocused","View","LeftWater","RatioView","RightWater","TimerView","Colors","changeScreen","updateIceAmount","updateIceWater","IceCoffee","isLeftWater","state","coffee","isWater","dispatch","isForcused","styles","container","containerItem","ratioContainer","StyleSheet","create","flex","marginTop","padding","flexDirection","alignItems","dark","color","text","backgroundColor","background","light"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,YAAT,QAA6B,0BAA7B;AAEA,SAASC,IAAT;AACA,SAASC,SAAT;AACA,SAASC,SAAT;AACA,SAASC,UAAT;AACA,SAASC,SAAT;AACA,OAAOC,MAAP;AACA,SAASC,YAAT;AACA,SAASC,eAAT,EAA0BC,cAA1B;;;;AAEA,eAAe,SAASC,SAAT,GAAqB;AAClC,MAAMC,WAAW,GAAGZ,WAAW,CAAC,UAACa,KAAD;AAAA,WAAWA,KAAK,CAACC,MAAN,CAAaC,OAAxB;AAAA,GAAD,CAA/B;AACA,MAAMC,QAAQ,GAAGjB,WAAW,EAA5B;AACA,MAAIkB,UAAU,GAAGhB,YAAY,EAA7B;AAKAH,EAAAA,SAAS,CAAC,YAAM;AACZkB,IAAAA,QAAQ,CAACR,YAAY,CAAC,WAAD,CAAb,CAAR;AACAQ,IAAAA,QAAQ,CAACP,eAAe,CAAC,CAAD,CAAhB,CAAR;AACAO,IAAAA,QAAQ,CAACN,cAAc,CAAC,CAAD,CAAf,CAAR;AACH,GAJQ,EAIN,CAACO,UAAD,CAJM,CAAT;AAMA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA,eACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAE,CAACD,MAAM,CAACE,aAAR,CAAb;AAAA,gBACGR,WAAW,GACV;AAAA,kBACE,KAAC,UAAD;AADF,QADU,GAKV;AAAA,kBACE,KAAC,SAAD;AADF;AANJ,MADF,EAYE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEM,MAAM,CAACG,cAApB;AAAA,gBACE,KAAC,SAAD;AADF,MAZF,EAeE,KAAC,IAAD;AAAA,gBACE,KAAC,SAAD;AADF,MAfF;AAAA,IADF;AAqBD;AAED,IAAMH,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,IAAI,EAAE;AADG,GADoB;AAI/BJ,EAAAA,aAAa,EAAE;AACbK,IAAAA,SAAS,EAAE,EADE;AAEbC,IAAAA,OAAO,EAAE,EAFI;AAGbC,IAAAA,aAAa,EAAE;AAHF,GAJgB;AAS/BN,EAAAA,cAAc,EAAE;AACdI,IAAAA,SAAS,EAAE,EADG;AAEdC,IAAAA,OAAO,EAAE,EAFK;AAGdE,IAAAA,UAAU,EAAE;AAHE,GATe;AAc/BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAEvB,MAAM,CAAC,MAAD,CAAN,CAAewB,IADlB;AAEJC,IAAAA,eAAe,EAAEzB,MAAM,CAAC,MAAD,CAAN,CAAe0B;AAF5B,GAdyB;AAkB/BC,EAAAA,KAAK,EAAE;AACLJ,IAAAA,KAAK,EAAEvB,MAAM,CAAC,OAAD,CAAN,CAAgBwB,IADlB;AAELC,IAAAA,eAAe,EAAEzB,MAAM,CAAC,OAAD,CAAN,CAAgB0B;AAF5B;AAlBwB,CAAlB,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useIsFocused } from '@react-navigation/native';\n\nimport { View } from '../components/Themed';\nimport { LeftWater } from '../components/View/LeftWater';\nimport { RatioView } from '../components/View/RatioVeiw';\nimport { RightWater } from '../components/View/RightWater';\nimport { TimerView } from '../components/View/TimerView';\nimport Colors from '../constants/Colors';\nimport { changeScreen } from '../redux/screenSlice';\nimport { updateIceAmount, updateIceWater } from '../redux/coffeeSlice';\n\nexport default function IceCoffee() {\n  const isLeftWater = useSelector((state) => state.coffee.isWater);\n  const dispatch = useDispatch();\n  let isForcused = useIsFocused();\n\n  // TODO:\n  // 画面遷移時ratioのデフォルト値を変更したい\n  // modalから再度画面遷移した際にもイベントが発火してしまう。\n  useEffect(() => {\n      dispatch(changeScreen('iceCoffee'));\n      dispatch(updateIceAmount(0));\n      dispatch(updateIceWater(0));\n  }, [isForcused]);\n\n  return (\n    <View style={styles.container}>\n      <View style={[styles.containerItem]}>\n        {isLeftWater ? (\n          <>\n            <RightWater />\n          </>\n        ) : (\n          <>\n            <LeftWater />\n          </>\n        )}\n      </View>\n      <View style={styles.ratioContainer}>\n        <RatioView />\n      </View>\n      <View>\n        <TimerView />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  containerItem: {\n    marginTop: 20,\n    padding: 10,\n    flexDirection: 'row',\n  },\n  ratioContainer: {\n    marginTop: 39,\n    padding: 10,\n    alignItems: 'center',\n  },\n  dark: {\n    color: Colors['dark'].text,\n    backgroundColor: Colors['dark'].background,\n  },\n  light: {\n    color: Colors['light'].text,\n    backgroundColor: Colors['light'].background,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}